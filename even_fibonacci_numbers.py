"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

def fibonacci_sequence(n: int) -> list:
    """
    Obtaing the first n elements form fibonacci sequence

    Input
    -----
        n: int
            Elements number in sequence
    Return
    ------
        seq_elements: list
            List with first n elements in fibonacci
    """

    assert n >2 , "It doesn't achieve the condition n > 2"
    seq_elements = [1, 2]
    while len(seq_elements) < n:
        new_value = sum(seq_elements[-2:])
        if new_value > 4000000:
            break
        else:
            seq_elements += [new_value]
    return seq_elements


def fibonacci_minor_than(limit_number: int) -> list:
    """
    Obtaing the first n elements form fibonacci sequence minor
    than limit_number

    Input
    -----
        limit_number: int
            limit number in fibonacci
    Return
    ------
        seq_elements: list
            List with elements achieving the condition
    """
    assert limit_number >= 3, "It doesn't achieve the condition limit_number > 3"
    seq_elements = [1, 2]
    while seq_elements[-1] < limit_number:
        seq_elements += [sum(seq_elements[-2:])]
    return seq_elements[:-1]

even_number = lambda x: x%2==0

if __name__ == '__main__':
    limit_value = int(input('Input limit value in fibonacci sequence :'))
    sum_even = sum(filter(even_number, fibonacci_minor_than(limit_value)))
    print(sum_even)
